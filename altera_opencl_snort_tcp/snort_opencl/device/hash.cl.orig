#ifndef HASH_CL
#define HASH_CL

__kernel void hash_module(void)
{

	hash_node_struct	hash_node_mem	[HASH_TBL_MEM_SIZE];		// 48*1024 = 48 KB
	hash_node_addr_t	hash_row_hdr_mem[HASH_TBL_NUM_ROWS];		// 2*256 = 512
	avail_mem_addr_t	avail_mem_stack [HASH_TBL_MEM_SIZE];		// 2*1024 = 2 KB

	//initialize avail mem stack
	for(avail_mem_addr_t i=0; i<HASH_TBL_MEM_SIZE; i++) 
	{
		avail_mem_stack[i] = i;
	}	
	avail_mem_addr_t tos = HASH_TBL_MEM_SIZE-1;	//top of stack

	//initialize all row header addresses as invalid
	for(hash_row_hdr_addr_t i = 0; i<HASH_TBL_NUM_ROWS-1; i++) 
	{
		hash_row_hdr_mem[i] = HASH_TBL_MEM_INVALID_ADDR;
	}

	hash_node_addr_t 	hash_node_addr, hash_node_addr_curr, hash_node_addr_prev, hash_node_addr_next;
	hash_row_hdr_addr_t hash_row_hdr_addr;
	hash_node_struct 	hash_node, hash_node_prev, hash_node_curr;
	hash_node_addr_t	hash_row_hdr;

	hash_cmd_t 			cmd_in; 			 
	hashkey_t 			hashkey_in; 		 
	hash_data_t 		hash_data_in; 	 
	hash_node_addr_t	hash_node_addr_in;

	hash_node_addr_t 	hash_node_addr_out;
	hash_data_t			hash_data_out;
	hash_ret_t			hash_ret_out;

	hash_intf_in_t  	hash_intf_in;
	hash_intf_out_t 	hash_intf_out;
	
	for(;;)
	{
		hash_intf_in = read_channel_altera(ch_hash_intf_in);
	
		cmd_in 		  	  = hash_intf_in.cmd;
		hashkey_in 	  	  = hash_intf_in.hashkey; 
		hash_data_in 	  = hash_intf_in.hash_data;
		hash_node_addr_in = hash_intf_in.hash_node_addr;

#ifdef EMUL
		//print_hash_intf_in(hash_intf_in);
#endif		
		//insert		
		if(cmd_in == cmd_insert)	//input: hashkey
		{

#ifdef EMUL
			if(tos == AVAIL_MEM_ADDR_EMPTY)	printf("\n Out of memory for hash table");
#endif

			hash_node_addr	= avail_mem_stack[tos];			
			
			//need to insert after "hash_node_addr_prev"
			//"hash_node" is the current node at addr "hash_node_addr_prev" if valid
			//hash_node already has the node data, that was populated by the find cmd earlier
			if(hash_node_addr_prev != HASH_TBL_MEM_INVALID_ADDR)	//valid
			{				
				hash_node.hash_addr_next = hash_node_addr;
				//update hash mem
				hash_node_mem[hash_node_addr_prev] = hash_node;
			}
			else	//update the row hdr entry
			{
				hash_row_hdr_addr = hash_func(hashkey_in)&(HASH_TBL_NUM_ROWS-1);
				hash_row_hdr_mem[hash_row_hdr_addr] = hash_node_addr;
			}

			hash_node_curr.hashkey	= hashkey_in;
			hash_node_curr.hash_data = hash_data_in;
			hash_node_curr.hash_addr_prev = hash_node_addr_prev;
			hash_node_curr.hash_addr_next = HASH_TBL_MEM_INVALID_ADDR;

			hash_node_mem[hash_node_addr] = hash_node_curr;	
			tos--;
			
			hash_node_addr_out = hash_node_addr;
			hash_data_out = hash_node_curr.hash_data;
			hash_ret_out  = inserted;
		}

		else if (cmd_in == cmd_delete)	//input: hash_node_addr_in, hashkey
		{
			bool update_node_next, update_node_prev, update_row_hdr;
			
			hash_row_hdr_addr	= hash_func(hashkey_in)&(HASH_TBL_NUM_ROWS-1);
			hash_node = hash_node_mem[hash_node_addr_in];

			if( (hash_node.hash_addr_prev == HASH_TBL_MEM_INVALID_ADDR) && (hash_node.hash_addr_next == HASH_TBL_MEM_INVALID_ADDR) )
				
			{	//single element
				hash_row_hdr = HASH_TBL_MEM_INVALID_ADDR;
				update_row_hdr = 1;
				update_node_next = 0; update_node_prev = 0;
			}
			else if (hash_node.hash_addr_prev == HASH_TBL_MEM_INVALID_ADDR)
				
			{	//remove head node
				hash_row_hdr = hash_node.hash_addr_next;
				update_row_hdr = 1;
				
				hash_node_addr_next = hash_node.hash_addr_next;
				hash_node_addr_prev = HASH_TBL_MEM_INVALID_ADDR;
				update_node_next = 1; update_node_prev = 0;
			}
			
			else if (hash_node.hash_addr_next == HASH_TBL_MEM_INVALID_ADDR)

			{	//remove tail node
				update_row_hdr = 0;

				hash_node_addr_prev = hash_node.hash_addr_prev;
				hash_node_addr_next = HASH_TBL_MEM_INVALID_ADDR;				
				update_node_next = 0; update_node_prev = 1;
			}
			
			else 
			{
				update_row_hdr = 0;
				hash_node_addr_prev = hash_node.hash_addr_prev;
				hash_node_addr_next = hash_node.hash_addr_next;
				update_node_next = 1; update_node_prev = 1;
				
			}
			tos++;
			
			if(update_row_hdr)		hash_row_hdr_mem[hash_row_hdr_addr] = hash_row_hdr;			
			if(update_node_prev)	
			{
				hash_node = hash_node_mem[hash_node_addr_prev];
				hash_node.hash_addr_next = hash_node_addr_next;
				hash_node_mem[hash_node_addr_prev] = hash_node;			
			}
			if(update_node_next)	
			{
				hash_node = hash_node_mem[hash_node_addr_next];
				hash_node.hash_addr_prev = hash_node_addr_prev;
				hash_node_mem[hash_node_addr_next] = hash_node;
			}
			avail_mem_stack[tos] = hash_node_addr_in;
			hash_ret_out  = deleted;
		}
		
		else if (cmd_in == cmd_find) //input: hashkey
		{
#ifdef EMUL		
			//uint8_t find_iter = 0;
#endif

			bool hashkey_match;
			hash_row_hdr_addr = hash_func(hashkey_in)&(HASH_TBL_NUM_ROWS-1);
			hash_node_addr_curr = hash_row_hdr_mem[hash_row_hdr_addr];
			hash_node_addr_prev = hash_node_addr_curr;
			hashkey_match = 0;

			while( (hash_node_addr_curr != HASH_TBL_MEM_INVALID_ADDR) && (hashkey_match == 0) )	
			{
				hash_node = hash_node_mem[hash_node_addr_curr];
				hashkey_match = hashkey_comp_func(hashkey_in, hash_node.hashkey);

				if(hashkey_match == 0)	
				{
					hash_node_addr_prev = hash_node_addr_curr;
					hash_node_addr_curr = hash_node.hash_addr_next;
				}
#ifdef EMUL				
				//find_iter++;
#endif
			}

			if(hashkey_match == 1)	//found
			{
				hash_node_addr_out = hash_node_addr_curr;
				hash_data_out = hash_node.hash_data;
				hash_ret_out  = found;
			}
			else
				hash_ret_out  = error;
#ifdef EMUL
			//printf("\nfind_iter = %u", find_iter);
#endif			
		}

		else if (cmd_in == cmd_update) //input: hash_mem_addr_in, hash_data
		{
			hash_node = hash_node_mem[hash_node_addr_in];
			hash_node.hash_data = hash_data_in;
			hash_node_mem[hash_node_addr_in] = hash_node;

			hash_ret_out = success;
		}

		hash_intf_out.hash_node_addr = hash_node_addr_out;
		hash_intf_out.hash_data		 = hash_data_out;
		hash_intf_out.hash_ret		 = hash_ret_out;
		
		write_channel_altera(ch_hash_intf_out, hash_intf_out);
#ifdef EMUL
		//print_hash_intf_out(hash_intf_out);
#endif
	}
}

#endif	//HASH_CL
